import React, { useEffect, useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import axiosInstance from '../utils/axiosInstance';
import '../styles/OrdersPage.css';
import io from 'socket.io-client';

const socket = io('http://localhost:5000');

const OrderPage = () => {
    const { id } = useParams();
    const [order, setOrder] = useState(null);
    const [creator, setCreator] = useState(null);
    const [error, setError] = useState(null);
    const [userId, setUserId] = useState(null);

    useEffect(() => {
        const fetchOrder = async () => {
            try {
                const response = await axiosInstance.get(`/orders/${id}`);
                setOrder(response.data);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∑–∞–∫–∞–∑–∞
                const userResponse = await axiosInstance.get(`/auth/${response.data.creatorId}`);
                setCreator(userResponse.data);
            } catch (err) {
                setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞');
            }
        };
        const fetchUserData = async () => {
            try {
                const response = await axiosInstance.get('/auth/profile');
                console.log("üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", response.data);
                setUserId(response.data.id);
                socket.emit('register', response.data.id);
            } catch (err) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", err);
            }
        };

        fetchOrder();
        fetchUserData();

        if (userId) {
            console.log("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);

            socket.on('orderRequested', (data) => {
                console.log("üîî –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫–∞–∑:", data);
            });
            socket.on('orderUpdated', fetchOrder);

            return () => {
                socket.off('orderRequested');
                socket.off('orderUpdated');
            };
        }
    }, [userId, id]);

    const handleRequestOrder = async (orderId) => {
        try {
            await axiosInstance.post(`/orders/${orderId}/request`);
            alert("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É!");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:", error);
            alert(error.response?.data?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å");
        }
    };

    if (error) {
        return <div className="error-message">–û—à–∏–±–∫–∞: {error}</div>;
    }

    if (!order || !creator) {
        return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
    }

    return (
        <div className="orders-container">
            <div className="orders-wrapper">
                <ul className="orders-list">
                    <li className="order-card">
                        <div className="order-content">
                            <div className="order-header">
                                <p className="order-title">
                                    <strong>–ó–∞–∫–∞–∑ ‚Ññ{order.id}</strong> –æ—Ç {creator.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}.
                                    –°–æ–∑–¥–∞–Ω {new Date(order.createdAt).toLocaleString()}.
                                </p>
                            </div>

                            <div className="order-left">
                                <p><strong>–¢–∏–ø –∑–∞–∫–∞–∑–∞:</strong> {order.type}</p>
                                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {order.description}</p>
                                <p><strong>–ê–¥—Ä–µ—Å:</strong> {order.address}</p>
                                <p><strong>–¶–µ–Ω–∞:</strong> {order.proposedSum} ‚ÇΩ</p>
                                <p><strong>–ò–º—è —Å–æ–∑–¥–∞—Ç–µ–ª—è:</strong> {creator.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}</p>
                                <p><strong>–†–µ–π—Ç–∏–Ω–≥:</strong> {creator.rating ? creator.rating.toFixed(1) : "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}</p>
                            </div>

                            {Array.isArray(order.images) && order.images.length > 0 ? (
                                order.images.map((image, index) => {
                                    const imageUrl = `http://localhost:5000${image}`;
                                    return <img key={index} src={imageUrl} alt={`Order Image ${index + 1}`} className="order-image"/>;
                                })
                            ) : (
                                <p>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç</p>
                            )}
                        </div>

                        {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∂–∞–ª–æ–± –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è */}
                        {creator.username && (
                            <Link to={`/complaints/${order.creatorId}`} className="complaints-button">
                                –ñ–∞–ª–æ–±—ã –Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è: {creator.complaintsCount || 0}                                       </Link>
                        )}

                        {userId !== order.creatorId && !order.executorId && order.status === 'pending' && (
                            <button className="take-order-button" onClick={() => handleRequestOrder(order.id)}>–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ</button>
                        )}
                    </li>
                </ul>
            </div>
        </div>
    );
};

export default OrderPage;
