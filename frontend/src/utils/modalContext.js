import React, { createContext, useState, useEffect } from 'react';
import io from 'socket.io-client';
import axiosInstance from './axiosInstance';

export const ModalContext = createContext();

const socket = io('http://localhost:5000'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket

export const ModalProvider = ({ children }) => {
    const [modalData, setModalData] = useState(null);
    const [userId, setUserId] = useState(null);
    const [notificationData, setNotificationData] = useState(null); // –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é

    useEffect(() => {
        const fetchUserData = async () => {
            try {
                const response = await axiosInstance.get('/auth/profile');
                setUserId(response.data.id);
                socket.emit('register', response.data.id); // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–∫–µ—Ç–µ
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
            }
        };

        fetchUserData();

        if (userId) {
            console.log("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);

            // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
            socket.on('orderRequested', (data) => {
                console.log("üîî –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:", data);

                if (data.creatorId === userId) {
                    setModalData({
                        title: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
                        description: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.executorId} —Ö–æ—á–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑.`,
                        onConfirm: () => handleApproveOrder(data.orderId),
                        onCancel: () => handleRejectOrder(data.orderId),
                    });
                }
            });

            // –°–ª—É—à–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            socket.on('orderApproved', (data) => {
                console.log("üîî –ó–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω:", data);
                if (data.message.includes("–í–∞—à –∑–∞–ø—Ä–æ—Å")) {
                    setNotificationData({
                        title: "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!",
                        description: data.message,
                        onClose: () => setNotificationData(null), // –ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    });
                }
            });

            return () => {
                socket.off('orderRequested');
                socket.off('orderApproved');
            };
        }
    }, [userId]);

    const openModal = (data) => {
        setModalData(data);
    };

    const closeModal = () => {
        setModalData(null);
    };

    const handleApproveOrder = async (orderId) => {
        try {
            await axiosInstance.post(`/orders/${orderId}/approve`);
            closeModal();
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
            alert(error.response?.data?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–∫–∞–∑");
        }
    };

    const handleRejectOrder = async (orderId) => {
        try {
            await axiosInstance.post(`/orders/${orderId}/reject`);
            closeModal();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", error);
            alert(error.response?.data?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è");
        }
    };

    return (
        <ModalContext.Provider value={{ openModal, closeModal }}>
            {children}
            {modalData && (
                <div className="modal">
                    <h2>{modalData.title}</h2>
                    <p>{modalData.description}</p>
                    <button onClick={modalData.onConfirm}>–û–¥–æ–±—Ä–∏—Ç—å</button>
                    <button onClick={modalData.onCancel}>–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                </div>
            )}

            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –≤–∏–¥–µ –º–æ–¥–∞–ª–∞ */}
            {notificationData && (
                <div className="modal">
                    <h2>{notificationData.title}</h2>
                    <p>{notificationData.description}</p>
                    <button onClick={notificationData.onClose}>–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            )}
        </ModalContext.Provider>
    );
};
