const express = require('express');
const router = express.Router();
const NodeGeocoder = require('node-geocoder');
const db = require('../models');
const authenticateToken = require('../middlewares/authenticateToken');
const multer = require('multer');
const { Op } = require('sequelize');
const path = require('path');
const { Sequelize } = require('sequelize');  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Sequelize
const moment = require('moment'); // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
const { Order, User } = require('../models'); // –î–æ–±–∞–≤—å User

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 6:00)
setInterval(async () => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –≤–∑—è—Ç—ã –≤ —Ä–∞–±–æ—Ç—É –∏ —Å–æ–∑–¥–∞–Ω—ã –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
        const ordersToDelete = await Order.findAll({
            where: {
                status: 'pending',
                createdAt: {
                    [Sequelize.Op.lt]: moment().subtract(24, 'hours').toDate(), // –ó–∞–∫–∞–∑—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
                },
            },
        });

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–∫–∏–µ –∑–∞–∫–∞–∑—ã
        for (const order of ordersToDelete) {
            await order.destroy();
            console.log(`–ó–∞–∫–∞–∑ ${order.id} —É–¥–∞–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`);
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤:", error);
    }
}, 60 * 60 * 1000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã)

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'uploads/orders'); // –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    },
    filename: (req, file, cb) => {
        cb(null, Date.now() + path.extname(file.originalname)); // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    },
});

const upload = multer({ storage });

const geocoder = NodeGeocoder({ provider: 'openstreetmap' });

module.exports = (io) => {

    // Add a new order
    router.post('/', authenticateToken, upload.array('images', 5), async (req, res) => {  // 'images' ‚Äî —ç—Ç–æ –ø–æ–ª–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        const { address, description, workTime, proposedSum, type, categoryId, subcategoryId} = req.body;
        const userId = req.user.id;

        try {
            if (!address) {
                return res.status(400).json({ message: '–ê–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –≥–µ–æ–∫–æ–¥–µ—Ä–∞
            const geoData = await geocoder.geocode(address);
            if (!geoData.length) {
                return res.status(404).json({ message: '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            const { latitude, longitude } = geoData[0];
            const coordinates = `${latitude},${longitude}`;

            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –≤ –º–∞—Å—Å–∏–≤
            const photoUrls = req.files ? req.files.map(file => `/uploads/orders/${file.filename}`) : [];

            const newOrder = await Order.create({
                userId,
                address,
                description,
                workTime,
                proposedSum,
                coordinates,
                type,
                createdAt: new Date().toISOString(),
                images: photoUrls,  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ
                creatorId: userId,
                status: 'pending',
                categoryId,
                subcategoryId,
            });

            io.emit('orderUpdated'); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤

            res.status(201).json(newOrder);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
    router.get('/all', async (req, res) => {
        try {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã, –Ω–µ –≤–∑—è—Ç—ã–µ –≤ —Ä–∞–±–æ—Ç—É (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            await Order.destroy({
                where: {
                    status: 'pending',
                    createdAt: {
                        [Sequelize.Op.lt]: moment().subtract(24, 'hours').toDate(),
                    },
                },
            });

            console.log("‚úÖ –°—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã");

            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const { categoryId, subcategoryId } = req.query;
            const whereClause = { status: 'pending' };

            if (categoryId) whereClause.categoryId = categoryId;
            if (subcategoryId) whereClause.subcategoryId = subcategoryId;

            // –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
            const orders = await Order.findAll({
                attributes: [
                    'id', 'createdAt', 'address', 'description', 'workTime',
                    'images', 'proposedSum', 'creatorId', 'coordinates',
                    'type', 'executorId', 'status'
                ],
                where: whereClause,
                include: [
                    { model: db.Category, as: 'category', attributes: ['id', 'name'] },
                    { model: db.Subcategory, as: 'subcategory', attributes: ['id', 'name'] },
                ],
            });

            console.log("üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:", orders.length);
            res.json(orders);
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", error);
            res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }
    });

    // Get active orders
    router.get('/active-orders', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.id;
        const activeOrders = await Order.findAll({
            where: {
                status: 'active',
                [Op.or]: [{ creatorId: userId }, { executorId: userId }],
            },
            include: [
                { model: db.Category, as: 'category', attributes: ['id', 'name'] },
                { model: db.Subcategory, as: 'subcategory', attributes: ['id', 'name'] }
            ]

        });
        res.json(activeOrders);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

    // Get order by ID
    router.get('/:id', async (req, res) => {
        const { id } = req.params;

        try {
            // –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ ID, –≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            const order = await Order.findByPk(id, {
                include: { model: db.User, as: 'user', attributes: ['id', 'username', 'phone'] },
            });

            // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω
            if (!order) {
                return res.status(404).json({ message: 'Order not found' });
            }

            // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, —á—Ç–æ–±—ã –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∞

            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–ª–µ—Ñ–æ–Ω–µ

            res.json(order);
        } catch (error) {
            console.error('Error fetching order:', error);
            res.status(500).json({ message: 'Server error' });
        }
    });

// –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    router.post("/:id/request", authenticateToken, async (req, res) => {
        const { id } = req.params; // ID –∑–∞–∫–∞–∑–∞
        const executorId = req.user.id; // ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è

        try {
            const order = await Order.findByPk(id);

            if (!order) {
                console.log(`‚ùå –ó–∞–∫–∞–∑ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
            }

            if (order.status !== "pending") {
                console.log(`‚ö†Ô∏è –ó–∞–∫–∞–∑ ${id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${order.status}).`);
                return res.status(400).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" });
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º `requestedExecutors`
            let requestedExecutors = [];
            if (order.requestedExecutors) {
                try {
                    requestedExecutors = JSON.parse(order.requestedExecutors);
                    if (!Array.isArray(requestedExecutors)) requestedExecutors = [];
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ requestedExecutors:", error);
                    requestedExecutors = [];
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å
            if (requestedExecutors.includes(executorId)) {
                console.log(`üîÑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ${executorId} —É–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª –∑–∞–∫–∞–∑ ${id}.`);
                return res.status(400).json({ message: "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑" });
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            requestedExecutors.push(executorId);
            order.requestedExecutors = JSON.stringify(requestedExecutors);
            await order.save();

            // –õ–æ–≥–∏—Ä—É–µ–º ID –∑–∞–∫–∞–∑—á–∏–∫–∞ (userId)
            console.log(`üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É userId=${order.userId} –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –∑–∞–∫–∞–∑ ID=${order.id}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –∑–∞–∫–∞–∑—á–∏–∫—É
            io.emit(`orderRequest:${order.userId}`, { orderId: order.id });

            res.json({ message: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É", order });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–∫–∞–∑–∞:", error);
            res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }
    });

    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–ø—Ä–æ—Å–∏–≤—à–∏—Ö –∑–∞–∫–∞–∑
    router.get('/:id/requested-executors', authenticateToken, async (req, res) => {
        const { id } = req.params;

        try {
            const order = await Order.findByPk(id);

            if (!order) {
                return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            // –ü–∞—Ä—Å–∏–º –º–∞—Å—Å–∏–≤ ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            let requestedExecutors = [];
            if (order.requestedExecutors) {
                try {
                    requestedExecutors = JSON.parse(order.requestedExecutors);
                    if (!Array.isArray(requestedExecutors)) {
                        requestedExecutors = [];
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ requestedExecutors:', error);
                    requestedExecutors = [];
                }
            }

            if (requestedExecutors.length === 0) {
                return res.json([]);
            }

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID
            const executors = await User.findAll({
                where: { id: requestedExecutors },
                attributes: ['id', 'username', 'rating', 'ratingCount', 'isVerified'] // –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
            });
            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', requestedExecutors);

            res.json(executors || []);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∏–≤—à–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:', error);
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    // Get approve for order
    router.post('/:id/approve', authenticateToken, async (req, res) => {
        const { id } = req.params;
        const { executorId } = req.body;  // –ü–æ–ª—É—á–∞–µ–º executorId –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞

        try {
            console.log(`‚ö° –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ID: ${id} –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ID: ${executorId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID: ${req.user.id}`);

            const order = await Order.findByPk(id);

            if (!order) {
                console.log('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            if (order.creatorId !== req.user.id) {
                console.log('‚ùå –ü–æ–ø—ã—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —á—É–∂–æ–≥–æ –∑–∞–∫–∞–∑–∞');
                return res.status(403).json({ message: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–¥–æ–±—Ä–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑' });
            }

            if (!order.requestedExecutors || order.requestedExecutors.length === 0) {
                console.log('‚ùå –ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π');
                return res.status(400).json({ message: '–ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è' });
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ executorId –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑—á–∏–∫–æ–º –µ—Å—Ç—å –≤ requestedExecutors
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            let requestedExecutors = [];
            try {
                requestedExecutors = JSON.parse(order.requestedExecutors);
                if (!Array.isArray(requestedExecutors)) {
                    requestedExecutors = [];
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ requestedExecutors:', error);
            }

            if (!requestedExecutors.includes(executorId)) {
                console.log('‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–∏–≤—à–∏—Ö');
                return res.status(400).json({ message: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–∏–≤—à–∏—Ö' });
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            order.executorId = executorId;
            order.requestedExecutors = []; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
            order.status = 'active'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π

            await order.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

            console.log(`‚úÖ –ó–∞–∫–∞–∑ ${order.id} –æ–¥–æ–±—Ä–µ–Ω, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω!`);

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
            io.emit('orderUpdated');

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            io.to(`user_${order.executorId}`).emit('orderApproved', {
                orderId: order.id,
                message: '–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ–¥–æ–±—Ä–µ–Ω!',
            });

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
            io.to(`user_${order.creatorId}`).emit('orderApproved', {
                orderId: order.id,
                message: '–í—ã —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–∏–ª–∏ –∑–∞–∫–∞–∑!',
            });

            res.json({ message: '–ó–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω!', order });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    //Get reject for order
    router.post('/:id/reject', authenticateToken, async (req, res) => {
        const { id } = req.params;

        try {
            const order = await Order.findByPk(id);

            if (!order) {
                return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            if (order.creatorId !== req.user.id) {
                return res.status(403).json({ message: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑' });
            }

            if (!order.executorId) {
                return res.status(400).json({ message: '–ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è' });
            }

            // –£–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–º
            order.executorId = null;
            await order.save();

            io.emit('orderUpdated');

            res.json({ message: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω', order });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    // Complete an order
    router.post("/complete/:id", authenticateToken, async (req, res) => {
        try {
            const orderId = req.params.id;
            const userId = req.user.id; // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            const order = await Order.findByPk(orderId);
            if (!order) return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–µ–¥–∏ —Ç–µ—Ö, –∫—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if (order.completedBy.includes(userId)) {
                return res.status(400).json({ message: "–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ" });
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Å—Å–∏–≤ `completedBy`
            order.completedBy = [...order.completedBy, userId];

            // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if (order.completedBy.includes(order.creatorId) && !order.completedBy.includes(order.executorId)) {
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
                io.to(`user_${order.executorId}`).emit('orderCompleted', {
                    orderId: order.id,
                    message: '–ó–∞–∫–∞–∑—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑',
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if (order.completedBy.includes(order.executorId) && !order.completedBy.includes(order.creatorId)) {
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
                io.to(`user_${order.creatorId}`).emit('orderCompleted', {
                    orderId: order.id,
                    message: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑',
                    creatorId: order.creatorId,   // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ
                    executorId: order.executorId  // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ
                });
            }


            // –ï—Å–ª–∏ –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "completed"
            if (order.completedBy.includes(order.creatorId) && order.completedBy.includes(order.executorId)) {
                order.status = "completed";
            }
            order.completedAt = new Date(); // –§–∏–∫—Å–∏—Ä—É–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await order.save();

            io.emit('orderUpdated'); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
            io.emit('activeOrdersUpdated'); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤

            res.json(order);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
            res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }
    });

    // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã
    router.post('/complain', authenticateToken, async (req, res) => {
        const { orderId, complaintText } = req.body;
        const userId = req.user?.id;

        console.log('req.user:', req.user);
        console.log('userId:', userId);

        if (!userId) {
            return res.status(400).json({ message: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å userId –∏–∑ —Ç–æ–∫–µ–Ω–∞' });
        }

        try {
            const order = await Order.findByPk(orderId);
            if (!order) {
                return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            console.log('order:', order);
            console.log('customerId:', order.creatorId, 'executorId:', order.executorId, 'userId:', userId);

            let complainedUserId = null;
            if (userId === order.creatorId) {
                if (!order.executorId) {
                    return res.status(400).json({ message: '–£ –∑–∞–∫–∞–∑–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' });
                }
                complainedUserId = order.executorId;
            } else if (userId === order.executorId) {
                complainedUserId = order.creatorId;
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∑–∞–∫–∞–∑–∞`);
                return res.status(403).json({ message: '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞' });
            }

            console.log(`–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ userId: ${complainedUserId}`);

            const complainedUser = await User.findByPk(complainedUserId);
            const currentComplaints = complainedUser.complaints || [];
            const updatedComplaints = [...currentComplaints, { userId, complaintText, date: new Date() }];

            await User.update({
                complaintsCount: (complainedUser.complaintsCount || 0) + 1,
                complaints: updatedComplaints
            }, { where: { id: complainedUserId } });

            return res.status(200).json({ message: '–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã:', error);
            return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã' });
        }
    });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    router.get('/completed/:userId', async (req, res) => {
        const { userId } = req.params;

        console.log("userId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:", userId); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—Ö–æ–¥–∏—Ç –ª–∏ userId

        if (!userId) {
            return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π userId' });
        }

        try {
            const completedOrders = await Order.findAll({
                where: {
                    status: 'completed',
                    [Op.or]: [
                        { creatorId: userId },  // –ó–∞–∫–∞–∑—á–∏–∫
                        { executorId: userId }   // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                    ]
                },
                attributes: ['id','type','address','proposedSum', 'status', 'completedAt', 'creatorId', 'executorId', 'description'], // –£–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è —Ö–æ—Ç–∏–º –≤–µ—Ä–Ω—É—Ç—å
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            res.json(completedOrders);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    // –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–∫–∞–∑—ã
    router.get('/creator/:userId', async (req, res) => {
        const { userId } = req.params;

        try {
            const orders = await Order.findAll({
                where: {
                    creatorId: userId,
                    status: 'pending',
                },  // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
                include: [
                    { model: db.Category, as: 'category', attributes: ['id', 'name'] },
                    { model: db.Subcategory, as: 'subcategory', attributes: ['id', 'name'] },
                    { model: db.User, as: 'user', attributes: ['id', 'username'] }
                ]

            });

            if (!orders.length) {
                return res.status(404).json({ message: '–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
            }

            res.json(orders);
        } catch (error) {
            console.error('Error fetching orders:', error);
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    return router;
};