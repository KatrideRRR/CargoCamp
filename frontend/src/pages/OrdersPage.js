import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axiosInstance from '../utils/axiosInstance';
import '../styles/OrdersPage.css';
import io from 'socket.io-client';
import Modal from '../components/Modal'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ

const socket = io('http://localhost:5000'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket

const OrdersPage = () => {
    const [orders, setOrders] = useState([]);
    const [error, setError] = useState(null);
    const [userId, setUserId] = useState(null); // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const navigate = useNavigate();
    const [modalOpen, setModalOpen] = useState(false);
    const [pendingRequest, setPendingRequest] = useState(null); // –î–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–µ

    useEffect(() => {
        const fetchOrders = async () => {
            try {
                const response = await axiosInstance.get('/orders/all');
                console.log("üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞–∫–∞–∑—ã:", response.data);
                setOrders(response.data);
                console.log(response.data);
            } catch (err) {
                setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
            }
        };
        const fetchUserData = async () => {
            try {
                const response = await axiosInstance.get('/auth/profile'); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                console.log("üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", response.data);
                setUserId(response.data.id);
                socket.emit('register', response.data.id);

            } catch (err) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", err);
            }
        };

        fetchOrders();
        fetchUserData();

        if (userId) {
            console.log("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);

            const handleOrderRequested = (data) => {
                console.log("üîî –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫–∞–∑:", data);

                if (data.creatorId === userId) {
                    setPendingRequest(data);
                    setModalOpen(true);
                }
            };
            const handleApproveOrder = (data) => {
                console.log("‚úÖ –ó–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω —á–µ—Ä–µ–∑ WebSocket:", data);

                alert(`‚úÖ ${data.message}`);
            };


            socket.on('orderApproved', handleApproveOrder);
            socket.on('orderUpdated', fetchOrders);
            socket.on('orderRequested', handleOrderRequested);

            return () => {
                socket.off('orderUpdated', fetchOrders);
                socket.off('orderRequested', handleOrderRequested);
                socket.off('orderApproved', handleApproveOrder);
            };
        }
    }, [userId]);


    const handleRequestOrder = async (orderId) => {
        try {
            await axiosInstance.post(`/orders/${orderId}/request`);
            alert("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É!");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:", error);
            alert(error.response?.data?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å");
        }
    };
    const handleApproveOrder = async (orderId) => {
        try {
            console.log("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:", orderId);
            await axiosInstance.post(`/orders/${orderId}/approve`);
            setModalOpen(false);
            setPendingRequest(null);
            navigate('/active-orders');
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
            alert(error.response?.data?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–∫–∞–∑");
        }
    };

    const handleRejectOrder = async (orderId) => {
        try {
            await axiosInstance.post(`/orders/${orderId}/reject`);
            setModalOpen(false);
            setPendingRequest(null);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", error);
            alert(error.response?.data?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è");
        }
    };



    if (error) {
        return <div className="error-message">–û—à–∏–±–∫–∞: {error}</div>;
    }

    return (
        <div className="orders-container">
            <div className="orders-wrapper">
                {orders.length > 0 ? (
                    <ul className="orders-list">
                        {orders.map((order) => (
                            <li className="order-card" key={order.id}>
                                <div className="order-content">
                                    <div className="order-left">
                                        <p className="order-type"><strong>–¢–∏–ø –∑–∞–∫–∞–∑–∞:</strong> {order.type}</p>
                                        <p className="order-description"><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {order.description}</p>
                                        <p className="order-address"><strong>–ê–¥—Ä–µ—Å:</strong> {order.address}</p>
                                        <p className="order-proposedSum"><strong>–¶–µ–Ω–∞:</strong> {order.proposedSum} ‚ÇΩ</p>
                                        <p><strong>ID —Å–æ–∑–¥–∞—Ç–µ–ª—è:</strong> {order.creatorId}</p>
                                    </div>
                                    {order.photoUrl && (<img src={`http://localhost:5000${order.photoUrl}`} alt="–§–æ—Ç–æ –∑–∞–∫–∞–∑–∞" className="order-photo"/>)}

                                </div>{userId !== order.creatorId && !order.executorId && order.status === 'pending' && (
                                <button className="take-order-button" onClick={() => handleRequestOrder(order.id)}>–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ</button>
                            )}
                                {userId === order.creatorId && order.executorId && order.status === 'pending' && (
                                    <>
                                        <button className="approve-button" onClick={() => handleApproveOrder(order.id)}>–û–¥–æ–±—Ä–∏—Ç—å</button>
                                        <button className="reject-button" onClick={() => handleRejectOrder(order.id)}>–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                                    </>
                                )}


                            </li>

                        ))}
                    </ul>
                ) : (
                    <p className="no-orders">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.</p> // –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç
                )}
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
            {modalOpen && pendingRequest && (
                <Modal onClose={() => setModalOpen(false)}>
                    <h2>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>
                    <p><strong>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</strong> {pendingRequest.executorId}</p>
                    <button className="approve-button" onClick={() => handleApproveOrder(pendingRequest.orderId)}>–û–¥–æ–±—Ä–∏—Ç—å</button>
                    <button className="reject-button" onClick={() => handleRejectOrder(pendingRequest.orderId)}>–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                </Modal>
            )}
        </div>
    );
};

export default OrdersPage;
