import React, { createContext, useState, useEffect } from 'react';
import io from 'socket.io-client';
import axiosInstance from '../utils/axiosInstance';
import { useNavigate } from 'react-router-dom'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º useNavigate
import '../styles/modalContext.css'

export const ModalContext = createContext();

const socket = io('http://localhost:5000'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket

export const ModalProvider = ({ children }) => {
    const [modalData, setModalData] = useState(null);
    const [userId, setUserId] = useState(null);
    const [notificationData, setNotificationData] = useState(null); // –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    const [completionNotificationData, setCompletionNotificationData] = useState(null); // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
    const navigate = useNavigate(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º navigate –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤

    useEffect(() => {
        const fetchUserData = async () => {
            try {
                const response = await axiosInstance.get('/auth/profile');
                setUserId(response.data.id);
                socket.emit('register', response.data.id); // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–∫–µ—Ç–µ
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
            }
        };

        fetchUserData();

        const fetchExecutorData = async (executorId) => {
            try {
                const response = await axiosInstance.get(`/auth/${executorId}`);
                return response.data;
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", error);
                return null;
            }
        };

        if (userId) {
            console.log("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);

            // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
            socket.on('orderRequested', async (data) => {
                console.log("üîî –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:", data);

                if (data.creatorId === userId) {
                    const executorInfo = await fetchExecutorData(data.executorId);

                    if (executorInfo) {
                        setModalData({
                            title: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
                            description: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${executorInfo.username} —Ö–æ—á–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. 
                              üìä –†–µ–π—Ç–∏–Ω–≥: ${executorInfo.rating || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"} ‚≠ê
                              üö® –ñ–∞–ª–æ–±—ã: ${executorInfo.complaintsCount || 0}
                              –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${data.orderId}`,
                            onConfirm: () => handleApproveOrder(data.orderId),
                            onCancel: () => handleRejectOrder(data.orderId),
                            executorId: executorInfo.id, // –î–æ–±–∞–≤–ª—è–µ–º ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∂–∞–ª–æ–±
                            orderId: data.orderId // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞
                        });
                    }
                }
            });

            // –°–ª—É—à–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            socket.on('orderApproved', (data) => {
                console.log("üîî –ó–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω:", data);
                if (data.message.includes("–í–∞—à –∑–∞–ø—Ä–æ—Å")) {
                    setNotificationData({
                        title: "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!",
                        description: `–ó–∞–∫–∞–∑ –Ω–æ–º–µ—Ä ${data.orderId}: ${data.message}`,
                        onClose: () => setNotificationData(null),
                    });
                }
            });

            // –°–ª—É—à–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            socket.on('orderCompleted', (data) => {
                console.log("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", data);

                if (data.message) {
                    setCompletionNotificationData({
                        title: "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞",
                        description: `–ó–∞–∫–∞–∑ –Ω–æ–º–µ—Ä ${data.orderId}: ${data.message}`,
                        onClose: () => setCompletionNotificationData(null),
                    });
                }
            });

            return () => {
                socket.off('orderRequested');
                socket.off('orderApproved');
                socket.off('orderCompleted');
            };
        }
    }, [userId]);

    const openModal = (data) => {
        setModalData(data);
    };

    const closeModal = () => {
        setModalData(null);
    };

    const handleApproveOrder = async (orderId) => {
        try {
            await axiosInstance.post(`/orders/${orderId}/approve`);
            closeModal();
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
            alert(error.response?.data?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–∫–∞–∑");
        }
    };

    const handleRejectOrder = async (orderId) => {
        try {
            await axiosInstance.post(`/orders/${orderId}/reject`);
            closeModal();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", error);
            alert(error.response?.data?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è");
        }
    };

    const handleGoToComplaints = (executorId, orderId) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º navigate –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
        navigate(`/complaints/${executorId}?orderId=${orderId}`);
    };

    return (
        <ModalContext.Provider value={{ openModal, closeModal }}>
            {children}

            {/* –û—Å–Ω–æ–≤–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
            {modalData && (
                <div className="modal-overlay">

                    <div className="modal">
                        <h2>{modalData.title}</h2>
                        <p>{modalData.description}</p>
                        <button onClick={modalData.onConfirm}>–û–¥–æ–±—Ä–∏—Ç—å</button>
                        <button onClick={modalData.onCancel}>–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>

                        {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∂–∞–ª–æ–±–∞–º –Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è */}
                        {modalData.executorId && (
                            <button onClick={() => handleGoToComplaints(modalData.executorId, modalData.orderId)}>
                                –ü–µ—Ä–µ–π—Ç–∏ –∫ –∂–∞–ª–æ–±–∞–º –Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                            </button>
                        )}
                    </div>

                </div>
                    )}

                    {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –≤–∏–¥–µ –º–æ–¥–∞–ª–∞ */}
                    {notificationData && (
                        <div className="modal-overlay">

                            <div className="modal">
                                <h2>{notificationData.title}</h2>
                                <p>{notificationData.description}</p>
                                <button onClick={notificationData.onClose}>–ó–∞–∫—Ä—ã—Ç—å</button>
                            </div>
                        </div>

                    )}

                            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ */}
                            {completionNotificationData && (
                                <div className="modal-overlay">

                                    <div className="modal">
                                        <h2>{completionNotificationData.title}</h2>
                                        <p>{completionNotificationData.description}</p>
                                        <button onClick={completionNotificationData.onClose}>–ó–∞–∫—Ä—ã—Ç—å</button>
                                    </div>
                                </div>

                            )}
        </ModalContext.Provider>
                    );
                    };
