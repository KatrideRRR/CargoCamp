import React, { createContext, useState, useEffect } from 'react';
import io from 'socket.io-client';
import axiosInstance from '../utils/axiosInstance';
import { useNavigate } from 'react-router-dom'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º useNavigate
import '../styles/modalContext.css'

export const ModalContext = createContext();

const socket = io('http://localhost:5000'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket

export const ModalProvider = ({ children }) => {
    const [modalData, setModalData] = useState(null);
    const [userId, setUserId] = useState(null);
    const [notificationData, setNotificationData] = useState(null); // –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    const [completionNotificationData, setCompletionNotificationData] = useState(null); // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
    const [showRatingModal, setShowRatingModal] = useState(false);
    const [selectedOrder, setSelectedOrder] = useState(null);
    const [rating, setRating] = useState(0);
    const navigate = useNavigate();

    useEffect(() => {
        const fetchUserData = async () => {
            try {
                const response = await axiosInstance.get('/auth/profile');
                setUserId(response.data.id);
                socket.emit('register', response.data.id); // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–∫–µ—Ç–µ
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
            }
        };

        fetchUserData();

        const fetchExecutorData = async (executorId) => {
            try {
                const response = await axiosInstance.get(`/auth/${executorId}`);
                return response.data;
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", error);
                return null;
            }
        };

        if (userId) {
            console.log("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);

            // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
            socket.on('orderRequested', async (data) => {
                console.log("üîî –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:", data);

                if (data.creatorId === userId) {
                    const executorInfo = await fetchExecutorData(data.requestedExecutors);


                }
            });

            // –°–ª—É—à–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            socket.on('orderApproved', (data) => {
                console.log("üîî –ó–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω:", data);
                if (data.message.includes("–í–∞—à –∑–∞–ø—Ä–æ—Å")) {
                    setNotificationData({
                        title: "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!",
                        description: `–ó–∞–∫–∞–∑ –Ω–æ–º–µ—Ä ${data.orderId}: ${data.message}`,
                        onClose: () => setNotificationData(null),
                    });
                }
            });

            // –°–ª—É—à–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            socket.on('orderCompleted', (data) => {
                console.log("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", data);

                if (data.message) {
                    setCompletionNotificationData({
                        title: "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞",
                        description: `–ó–∞–∫–∞–∑ –Ω–æ–º–µ—Ä ${data.orderId}: ${data.message}`,
                        orderId: data.orderId,
                        creatorId: data.creatorId,  // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏
                        executorId: data.executorId // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏
                    });
                }
            });


            return () => {
                socket.off('orderRequested');
                socket.off('orderApproved');
                socket.off('orderCompleted');
            };
        }
    }, [userId]);

    const openModal = (data) => {
        setModalData(data);
    };

    const closeModal = () => {
        setModalData(null);
    };

    const handleApproveOrder = async (orderId, executorId) => {
        try {
            console.log(`üëç –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ${orderId} –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ${executorId}`);
            await axiosInstance.post(`/orders/${orderId}/approve`, {
                executorId: executorId,
            });

            closeModal();
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
            alert(error.response?.data?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–∫–∞–∑");
        }
    };

    const handleRejectOrder = async (orderId) => {
        try {
            await axiosInstance.post(`/orders/${orderId}/reject`);
            closeModal();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", error);
            alert(error.response?.data?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è");
        }
    };

    const handleGoToComplaints = (executorId, orderId) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º navigate –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
        navigate(`/complaints/${executorId}?orderId=${orderId}`);
    };

    const handleCompleteOrder = async (orderId, creatorId, executorId) => {
        console.log("‚ñ∂ –ù–∞—á–∞–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", { orderId, creatorId, executorId });

        setSelectedOrder({
            id: orderId,
            creatorId,
            executorId
        });

        setShowRatingModal(true);

    };


    const submitRating = async () => {
        if (!selectedOrder || rating === 0) {
            console.error("‚õî –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            return;
        }

        try {
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞: ${rating} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${selectedOrder.id}`);

            const token = localStorage.getItem('authToken');
            console.log("üéØ –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–π—Ç–∏–Ω–≥–∞:", selectedOrder);
            console.log("üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Å—Ç–∞–≤–∏—Ç –æ—Ü–µ–Ω–∫—É):", userId);
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–≥–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const ratedUserId = selectedOrder.executorId === userId
                ? selectedOrder.creatorId
                : selectedOrder.executorId;

            console.log("üéØ –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", ratedUserId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            await axiosInstance.post("/auth/rate", {
                userId: ratedUserId,
                rating,

            }, {
                headers: { Authorization: `Bearer ${token}` },
            });

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑
            await axiosInstance.post(`/orders/complete/${selectedOrder.id}`, {},
                { headers: { Authorization: `Bearer ${token}` } }
            );

            console.log("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
            setCompletionNotificationData(null);

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
            setShowRatingModal(false);
            setSelectedOrder(null);
            setRating(0);

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞", error);
        }
    };


    return (
        <ModalContext.Provider value={{ openModal: setModalData, closeModal: () => setModalData(null) }}>
            {children}

            {/* –û—Å–Ω–æ–≤–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
            {modalData && (
                <div className="modal-overlay">

                    <div className="modal">
                        <h2>{modalData.title}</h2>
                        <p>{modalData.description}</p>
                        <button onClick={modalData.onConfirm}>–û–¥–æ–±—Ä–∏—Ç—å</button>
                        <button onClick={modalData.onCancel}>–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>

                        {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∂–∞–ª–æ–±–∞–º –Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è */}
                        {modalData.executorId && (
                            <button onClick={() => handleGoToComplaints(modalData.executorId, modalData.orderId)}>
                                –ü–µ—Ä–µ–π—Ç–∏ –∫ –∂–∞–ª–æ–±–∞–º –Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                            </button>
                        )}
                    </div>

                </div>
                    )}

                    {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –≤–∏–¥–µ –º–æ–¥–∞–ª–∞ */}
                    {notificationData && (
                        <div className="modal-overlay">

                            <div className="modal">
                                <h2>{notificationData.title}</h2>
                                <p>{notificationData.description}</p>
                                <button onClick={notificationData.onClose}>–ó–∞–∫—Ä—ã—Ç—å</button>
                            </div>
                        </div>

                    )}

                            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ */}
                            {completionNotificationData && (
                                <div className="modal-overlay">

                                    <div className="modal">
                                        <h2>{completionNotificationData.title}</h2>
                                        <p>{completionNotificationData.description}</p>
                                        <button onClick={completionNotificationData.onClose}>–ó–∞–≤–µ—Ä—à–∏—Ç—å</button>
                                    </div>
                                </div>

                            )}

            {/* –û–∫–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ */}
            {completionNotificationData && (
                <div className="modal-overlay">
                    <div className="modal">
                        <h2>{completionNotificationData.title}</h2>
                        <p>{completionNotificationData.description}</p>
                        <button onClick={() => handleCompleteOrder(
                            completionNotificationData.orderId,
                            completionNotificationData.creatorId,
                            completionNotificationData.executorId
                        )}>
                            –ó–∞–≤–µ—Ä—à–∏—Ç—å
                        </button>

                    </div>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ */}
            {showRatingModal && selectedOrder && (
                <div className="modal-overlay">
                <div className="modal">
                        <h2>–û—Ü–µ–Ω–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞</h2>
                        <div className="stars">
                            {[1, 2, 3, 4, 5].map((star) => (
                                <span
                                    key={star}
                                    className={star <= rating ? "star selected" : "star"}
                                    onClick={() => setRating(star)}
                                >
                                    ‚òÖ
                                </span>
                            ))}
                        </div>
                        <button onClick={submitRating} disabled={rating === 0}>
                            –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑
                        </button>
                    </div>
                </div>
            )}

        </ModalContext.Provider>
                    );
                    };
